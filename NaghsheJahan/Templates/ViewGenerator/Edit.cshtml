@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
        @:@@{
        @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
            @:Layout = "@Model.LayoutPageFile";
        }
        @:}
        @:
    }
    else
    {
        @:@@{
        @:Layout = null;
        @:}
        @:
        @:<!DOCTYPE html>
        @:
        @:<html>
        @:<head>
            @:<meta name="viewport" content="width=device-width" />
            @:<title>@Model.ViewName</title>
        @:</head>
        @:<body>
            @:
            //    PushIndent("    ");
    }
        @:<div class="col-lg-6">
            @:<div class="card card-custom gutter-b example example-compact">
                @:<div class="card-header">
                    @:<h3 class="card-title">ویرایش</h3>
                @:</div>
                @:<form class="form" asp-action="@Model.ViewName">
                    @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    @:<div class="card-body">
                        foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.IsPrimaryKey)
        {
                                @:<input type="hidden" asp-for="@property.PropertyName" />
                                continue;
        }

        if (property.Scaffold)
        {
            if (property.IsReadOnly)
            {
                continue;
            }
            if (property.IsForeignKey)
            {
                                    @:<div class="form-group">
                                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                                        @:<select asp-for="@property.PropertyName" class="form-control" asp-items="ViewBag.@property.PropertyName"></select>
                                    @:</div>
                                    continue;
            }

            bool isCheckbox = property.TypeName.Equals("System.Boolean");
            if (isCheckbox)
            {
                                    @:<div class="form-group form-check">
                                        @:<label class="form-check-label">
                                            @:<input class="form-check-input" asp-for="@property.PropertyName" /> @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                                        @:</label>
                                    @:</div>
                                }
            else if (property.IsEnum && !property.IsEnumFlags)
            {
                                    @:<div class="form-group">
                                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                                        @:<select asp-for="@property.PropertyName" class="form-control"></select>
                                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                    @:</div>
                                }
            else if (property.IsMultilineText)
            {
                                    @:<div class="form-group">
                                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                                        @:<textarea asp-for="@property.PropertyName" class="form-control"></textarea>
                                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                    @:</div>
                                }
            else
            {
                                    @:<div class="form-group">
                                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                                        @:<input asp-for="@property.PropertyName" class="form-control" />
                                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                    @:</div>
                                }
        }
        // Ideally we shouldn't be here  but if the user marks the foreign key as [ScaffoldColumn(false)], we want to atleast try to make it work.
        else if (property.IsForeignKey)
        {
                                @:<input type="hidden" asp-for="@property.PropertyName" />
                                continue;
        }
    }
                    @:</div>
                    @:<div class="card-footer">
                        @: <input type="submit" value="Submit" class="btn btn-primary mr-2" />
                        @:<a asp-action="Index" class="btn btn-secondary">Cancel</a>
                    @:</div>
                @:</form>
            @:</div>
        @:</div>
    if (Model.ReferenceScriptLibraries)
    {
        @:@@section Scripts {
        @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
        @:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
    @:</body>
@:</html>
}
}
@functions
{
    string GetAssociationName(IPropertyMetadata property)
    {
        //Todo: Implement properly.
        return property.PropertyName;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
}
