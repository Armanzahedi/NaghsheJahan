@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq

@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
        @:@@{
        @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
            @:Layout = "@Model.LayoutPageFile";
        }
        @:}
        @:
        @:
    }
    else
    {
        @:@@{
        @:Layout = null;
        @:}
        @:
        @:<!DOCTYPE html>
        @:
        @:<html>
        @:<head>
            @:<meta name="viewport" content="width=device-width" />
            @:<title>@Model.ViewName</title>
        @:</head>
        @:<body>
            //    PushIndent("    ");
        }
        @:<div class="card card-custom">
            <div class="card-header flex-wrap border-0 pt-6 pb-0">
                <div class="card-title">
                    <h3 class="card-label">
                        @Model.ViewName
                        <span class="d-block text-muted pt-2 font-size-sm">Insert or edit @Model.ViewName</span>
                    </h3>
                </div>
                <div class="card-toolbar">
                    <!--begin::Button-->
                    <a asp-action="Create" class="btn btn-primary font-weight-bolder">
                        <span class="svg-icon svg-icon-md">
                            <!--begin::Svg Icon | path:assets/media/svg/icons/Design/Flatten.svg--><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                    <rect x="0" y="0" width="24" height="24" />
                                    <circle fill="#000000" cx="9" cy="15" r="6" />
                                    <path d="M8.8012943,7.00241953 C9.83837775,5.20768121 11.7781543,4 14,4 C17.3137085,4 20,6.6862915 20,10 C20,12.2218457 18.7923188,14.1616223 16.9975805,15.1987057 C16.9991904,15.1326658 17,15.0664274 17,15 C17,10.581722 13.418278,7 9,7 C8.93357256,7 8.86733422,7.00080962 8.8012943,7.00241953 Z" fill="#000000" opacity="0.3" />
                                </g>
                            </svg><!--end::Svg Icon-->
                        </span>	رکورد جدید
                    </a>
                    <!--end::Button-->
                </div>
            </div>
            @:<div class="card-body">
                Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
                Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);
                @:@@(Html.Kendo().Grid(Model)
                @:.Name("Grid")
                @:.HtmlAttributes(new { style = "height:600px" })
                @:.Columns(columns =>
                @:{
                foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                {

                    if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                        && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                    {
                        @:columns.Bound(model => model.@GetValueExpression(property));

                    }
                    else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                    {
                        @:columns.Bound(model => model.@GetValueExpression(navigation).@navigation.DisplayPropertyName);
                    }
                }
                @:columns.Bound(item => @@item.Id).IncludeInMenu(false).Sortable(false).Title("دستورات").Filterable(false).Groupable(false)
                @:.ClientTemplate(
                @:$"<a class='btn btn-sm btn-clean btn-icon mr-2' href='/Admin/{@@ViewContext.RouteData.Values["controller"].ToString()}/Edit/#: Id #'><i class='far fa-edit'></i></a>" +
                @:$"<a class='btn btn-sm btn-clean btn-icon' href='/Admin/{@@ViewContext.RouteData.Values["controller"].ToString()}/Delete/#: Id #'><i class='far fa-trash-alt'></i></a>").Width(255);
                @:})
                @:.ToolBar(toolbar =>
                @:{
                @:toolbar.Search().Text("جستجو");
                //toolbar.Excel().Text("خروجی اکسل");
                @:})
                @:.Height(700)
                @:.Sortable()
                //.Groupable(group => group.Messages(m=>m.Empty("برای دسته بندی کردن اطلاعات ستون را اینجا بکشید.")))
                //.Scrollable()
                @:.Pageable(pager => pager.PageSizes(new int[] { 10, 30, 50, 70, 100 }).Messages(m => m.ItemsPerPage("آیتم در هر صفحه").Display("")))
                @:.Filterable(filterable => filterable
                @:.Messages(m => m
                @:.Filter("فیلتر")
                @:.Clear("حذف")
                @:.Info("آن هایی را نشان بده که:")
                @:.And("و")
                @:.Or("یا")
                @:)
                @:.Operators(operators => operators
                @:.ForString(str => str.Clear()
                @:.IsEqualTo("برابر است با")
                @:.IsNotEqualTo("برابر نیست با")
                @:.Contains("شامل میشود")
                @:.DoesNotContain("شامل نمیشود")
                @:.StartsWith("شروع میشود با")
                @:.IsNullOrEmpty("خالی است")
                @:.IsNotNullOrEmpty("خالی نیست")
                @:)
                @:)
                @:)
                @:)
            @:</div>
        @:</div>
}
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }
}
@@section Scripts {
<script>

    $(document).ready(function () {
        $('.k-i-filter').removeClass("k-i-filter").addClass("k-icon k-i-more-vertical");
    });
</script>
}
